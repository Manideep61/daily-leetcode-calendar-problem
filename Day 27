class Solution {
public:
    const int MOD = 1e9 + 7;
    int modPow(long long base, long long exp) {
        long long result = 1;
        while (exp > 0) {
            if (exp % 2 == 1)
                result = (result * base) % MOD;
            base = (base * base) % MOD;
            exp /= 2;
        }
        return result;
    }
    vector<int> productQueries(int n, vector<vector<int>>& queries) {
        vector<int> powers;
        for (int i = 0; i < 32; ++i) {
            if ((n >> i) & 1) {
                powers.push_back(1 << i); 
            }
        }
        int m = powers.size();
        vector<long long> prefix(m);
        prefix[0] = powers[0];
        for (int i = 1; i < m; ++i) {
            prefix[i] = (prefix[i - 1] * powers[i]) % MOD;
        }
        vector<int> result;
        for (auto& q : queries) {
            int l = q[0], r = q[1];
            if (l == 0) {
                result.push_back(prefix[r]);
            }else {
                long long inv = modPow(prefix[l - 1], MOD - 2);
                long long prod = (prefix[r] * inv) % MOD;
                result.push_back(prod);
            }
        }
        return result;
    }
};
