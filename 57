class Solution {
public:
    int minimumTeachings(int n, vector<vector<int>>& languages, vector<vector<int>>& friendships) {
        int m = languages.size();
        vector<unordered_set<int>> userLangs(m);
        for (int i = 0; i < m; ++i) {
            for (int lang : languages[i]) {
                userLangs[i].insert(lang);
            }
        }
        unordered_set<int> needTeach;
        for (auto& pair : friendships) {
            int u = pair[0] - 1;
            int v = pair[1] - 1;
            bool canCommunicate = false;
            for (int lang : userLangs[u]) {
                if (userLangs[v].count(lang)) {
                    canCommunicate = true;
                    break;
                }
            }
            if (!canCommunicate) {
                needTeach.insert(u);
                needTeach.insert(v);
            }
        }
        int minTeach = INT_MAX;
        for (int lang = 1; lang <= n; ++lang) {
            int count = 0;
            for (int user : needTeach) {
                if (!userLangs[user].count(lang)) {
                    count++;
                }
            }
            minTeach = min(minTeach, count);
        }
        return minTeach;
    }
};
