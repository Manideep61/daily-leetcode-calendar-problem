class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> res;
        vector<vector<bool>> pacific(m, vector<bool>(n,false));
        vector<vector<bool>> atlantic(m, vector<bool>(n,false));
        vector<pair<int, int>> directions = {{-1,0}, {1,0}, {0,-1}, {0,1}};
        function<void(int, int, vector<vector<bool>>&)> dfs = [&](int r, int c, vector<vector<bool>>& ocean) {
            ocean[r][c] = true;
            for(auto [dr, dc] : directions){
                int nr = r + dr;
                int nc = c + dc;
                if(nr < 0 || nr >= m || nc < 0 || nc >= n) continue;
                if(ocean[nr][nc]) continue;
                if(heights[nr][nc] < heights[r][c]) continue;
                dfs(nr,nc,ocean);
            }
        };
        for(int i = 0; i<m;i++){
            dfs(i, 0, pacific);
            dfs(i, n-1,atlantic);
        }
        for(int j=0;j<n;j++){
            dfs(0, j, pacific);
            dfs(m-1,j,atlantic);
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(pacific[i][j] && atlantic[i][j]){
                    res.push_back({i, j});
                }
            }
        }
        return res;
    }
};
