class Solution {
public:
    int minimumSum(vector<vector<int>>& grid) {
        int answer = INT_MAX;
        for (int rotationCount = 0; rotationCount < 4; rotationCount++) {
            int rows = grid.size();
            int cols = grid[0].size();
            for (int i = 1; i < rows; i++) {
                int areaTop = getMinArea(vector<vector<int>>(grid.begin(), grid.begin() + i));
                for (int j = 1; j < cols; j++) {
                    vector<vector<int>> bottomLeft(rows - i, vector<int>(j));
                    vector<vector<int>> bottomRight(rows - i, vector<int>(cols - j));
                    for (int r = 0; r < rows - i; r++) {
                        for (int c = 0; c < j; c++) {
                            bottomLeft[r][c] = grid[i + r][c];
                        }
                        for (int c = j; c < cols; c++) {
                            bottomRight[r][c - j] = grid[i + r][c];
                        }
                    }
                    int areaBottomLeft = getMinArea(bottomLeft);
                    int areaBottomRight = getMinArea(bottomRight);
                    answer = min(answer, areaTop + areaBottomLeft + areaBottomRight);
                }
                for (int k = i + 1; k < rows; k++) {
                    vector<vector<int>> middlePart(grid.begin() + i, grid.begin() + k);
                    vector<vector<int>> bottomPart(grid.begin() + k, grid.end());
                    int areaMiddle = getMinArea(middlePart);
                    int areaBottom = getMinArea(bottomPart);
                    answer = min(answer, areaTop + areaMiddle + areaBottom);
                }
            }
            grid = rotateGrid(grid);
        }
        return answer;
    }
private:
    int getMinArea(const vector<vector<int>>& mat) {
        if (mat.empty() || mat[0].empty()) return 0;
        int rows = mat.size();
        int cols = mat[0].size();
        int minRow = INT_MAX, minCol = INT_MAX;
        int maxRow = -1, maxCol = -1;
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (mat[r][c] == 1) {
                    if (r < minRow) minRow = r;
                    if (r > maxRow) maxRow = r;
                    if (c < minCol) minCol = c;
                    if (c > maxCol) maxCol = c;
                }
            }
        }
        if (maxRow == -1) return 0;
        return (maxRow - minRow + 1) * (maxCol - minCol + 1);
    }
    vector<vector<int>> rotateGrid(const vector<vector<int>>& mat) {
        int rows = mat.size();
        int cols = mat[0].size();
        vector<vector<int>> rotated(cols, vector<int>(rows));
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                rotated[c][rows - 1 - r] = mat[r][c];
            }
        }
        return rotated;
    }
};
