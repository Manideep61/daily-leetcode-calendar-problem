class FoodRatings {
    unordered_map<string, pair<string, int>> foodInfo;
         
    struct cmp {
        bool operator()(const pair<int, string>& a, const pair<int, string>& b) const {
            if (a.first != b.first) return a.first < b.first;
                return a.second > b.second;
        }
    };
                                                             
    unordered_map<string, priority_queue<pair<int, string>, vector<pair<int, string>>, cmp>> cuisineHeap;
                                                                     
public:
    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) {
        int n = foods.size();
        for (int i = 0; i < n; ++i) {
            foodInfo[foods[i]] = {cuisines[i], ratings[i]};
            cuisineHeap[cuisines[i]].push({ratings[i], foods[i]});
        }
        
    }
    
    void changeRating(string food, int newRating) {
        auto& [cuisine, oldRating] = foodInfo[food];
        foodInfo[food].second = newRating;
        cuisineHeap[cuisine].push({newRating, food});
    }
    
    string highestRated(string cuisine) {
        auto& pq = cuisineHeap[cuisine];
        while (!pq.empty()) {
            auto [rating, food] = pq.top();
            if (foodInfo[food].second == rating) {
                return food;
            } else {
                pq.pop();
            }
        }
        return "";
    }
};

/**
 * Your FoodRatings object will be instantiated and called as such:
 * FoodRatings* obj = new FoodRatings(foods, cuisines, ratings);
 * obj->changeRating(food,newRating);
 * string param_2 = obj->highestRated(cuisine);
 */
